buildscript {
	repositories {
		mavenCentral()
		google()
		maven {
			name = "forge"
			url = "https://maven.minecraftforge.net/"
		}
		maven { url = 'https://repo.spongepowered.org/maven' }
	}
	dependencies {
		dependencies {
			classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		}
		classpath 'com.guardsquare:proguard-gradle:7.3.2'
		classpath 'org.spongepowered:mixingradle:0.7.+'
	}
}

plugins {
	id 'java-library'
	id 'maven-publish'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

// Defines a Java 8 compatible JDK.
def compiler = javaToolchains.compilerFor {
	languageVersion = JavaLanguageVersion.of(8)
}

// Tells Gradle to use the previously defined Java 8 compatible JDK.
java {
	toolchain {
		compiler
	}
}

// Tells Gradle to always compile with the previously defined Java 8 compatible JDK.
tasks.withType(JavaCompile).configureEach {
	javaCompiler = compiler
}

archivesBaseName = project.archives_base_name
version = project.mod_version + "-" + project.minecraft_version
group = project.maven_group
def internalVersion = project.mod_version

// Information for ForgeGradle to configure the Minecraft / Forge version.
minecraft {
	mappings channel: project.mcp_channel, version: project.mcp_version
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	// Default run configurations.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}
	}
}

configurations {
	// Another list of dependencies to use with ProGaurd, as ForgeGradle isn't happy about resolving it the normal way.
	// I'm not happy about it either.
	proguardHack
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.forge_version}"

	// Mixins
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	compileOnly 'org.spongepowered:mixin:0.8.5'
	proguardHack 'org.spongepowered:mixin:0.8.5'
}

mixin {
	add sourceSets.main, 'punch2prime.refmap.json'
	config 'punch2prime.mixins.json'

	debug.verbose = true
	debug.export = true
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import proguard.gradle.ProGuardTask

processResources {
	inputs.property "version", internalVersion
	inputs.property "minecraft_version", project.minecraft_version

	filesMatching('mcmod.info') {
			expand 'version': internalVersion, 'mcversion': minecraft_version
	}

	// Minifies all .json files when building the mod.
	// The source files are not minified, only the files in the resulting .jar.
	// This both helps in reducing the size of the built .jar, and verifies that your .json files are valid each time you build.
	// This script is from https://github.com/TelepathicGrunt/RepurposedStructures-Fabric/blob/82d579bb3e9a48859a0b2b1d78cc1ace5417d567/build.gradle#L84
	doLast {

		def jsonMinifyStart = System.currentTimeMillis()
		def jsonMinified = 0
		def jsonBytesSaved = 0

		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}

		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
tasks.register('sourcesJar', Jar) {
	dependsOn(classes)

	archiveClassifier = "sources"
	from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for ProGuard to minimise.
tasks.register('unmappedJar', Jar) {
	archiveClassifier = "dev"
	from sourceSets.main.output
}

// This task uses ProGuard to shrink the built .jar's file size and optimise the bytecode. TODO Cleanup.
tasks.register('proguard', ProGuardTask) {
	dependsOn(unmappedJar)
	verbose

	target "1.8"

	// Use the non-remapped .jar as the input file, because ForgeGradle has a convenient task to map it to obfuscated Minecraft class names for us when we're done optimising it
	injars "build/libs/" + archivesBaseName + "-" + version + "-dev.jar"
	outjars "build/libs/" + archivesBaseName + "-" + version + "-proguard-dev.jar"

	// Get the location of rt.jar from the provided toolchain.
	// Note to self: probably support building with not outdated versions of Java in the future.
	libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/lib/rt.jar"
	// If rt.jar is not there, try looking inside a JRE folder instead.
	libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/jre/lib/rt.jar"

	// Add relevant Minecraft libraries to ProGuard's list of libraries to obfuscate against.
	libraryjars project.configurations.minecraft

	// Add the dependencies to ProGuard's list of libraries to obfuscate against. I'd love a more sane way of doing this.
	libraryjars project.configurations.proguardHack

	// The rest of the configs are in this file
	configuration 'guard.pro'
}

// TODO rethink probably
tasks.register('optimisedJar', Jar) {
	dependsOn(proguard)

	from zipTree(proguard.outputs.files.singleFile)
	//archiveClassifier = "proguard"

	manifest {
		attributes([
			"MixinConnector": "com.github.NeRdTheNed.Punch2Prime.Connector",
			"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
			'ForceLoadAsMod': 'true'
		])
	}
}

reobf {
	optimisedJar {
		// This line left intentionally blank?
	}
}

tasks.optimisedJar.finalizedBy('reobfOptimisedJar')

jar {
	archiveClassifier = "debug" // Contains things like variables with actual names, line numbers etc. Useful for debugging, but these things take up file size, so they have to go.
	manifest {
		attributes([
			"MixinConnector": "com.github.NeRdTheNed.Punch2Prime.Connector",
			"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
			'ForceLoadAsMod': 'true'
		])
	}
}

// Creates the listed artifacts on building the mod.
artifacts {
	archives sourcesJar
	archives optimisedJar
}

// TODO this is a bit dumb
tasks.register('deleteProGuardOutput', Delete) {
	dependsOn(proguard)

	delete proguard.outputs.files.singleFile
}

build.finalizedBy(cleanUnmappedJar, deleteProGuardOutput)

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(jar) {
				builtBy build
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
			}
			artifact(optimisedJar) {
				builtBy optimisedJar
			}
		}
	}
}
